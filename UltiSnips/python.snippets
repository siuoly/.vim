# key alias
# call UltiSnips#RefreshSnippets()
snippet pp "print()" b
print( ${1:${VISUAL}} )
endsnippet


snippet "([^\s].*)\.pp" "print() postfix" r
print( `!p snip.rv = match.group(1)`) $1
endsnippet

snippet "([^\s]+)\.sh" "show() postfix" r
print( f"{`!p snip.rv = match.group(1)`=}" ) $1
endsnippet

snippet "([^\s]+)\.l" "len() postfix" r
len( `!p snip.rv = match.group(1)`) $1
endsnippet

snippet "([^\s]+)\.ty" "type() postfix" r
type( `!p snip.rv = match.group(1)`) $1
endsnippet

snippet "([^\s]+)\.li" "list() postfix" r
list( `!p snip.rv = match.group(1)`) $1
endsnippet


## from lib
snippet #f "from xxx import xxx" b
from ${1:} import ${2:}
endsnippet

## import lib
snippet #i "import abbr" b
import 
endsnippet
snippet #I "import abbr" b
import 
endsnippet

# class definitoin
global !p
def get_args(line: str):
	args = []
	for arg in map(lambda x: x.lstrip(), line.split(',')):
		temp = arg.split(':')
		attr, anno = (temp[0], temp[1].lstrip()) if len(temp) > 1 else (temp[0], None)
		args.append((attr, anno))
	return args
endglobal
snippet cl "class ..." b
class $1:
	"""$2`!p
if "\n" in t[2]:
	snip >> 1
	snip += '"""'
else:
	snip.rv = '"""'`
	def __init__(self, $3):`!p
snip >> 2
for arg in get_args(t[3]):
	snip += f"self.{arg[0]} = {arg[0]}"`$0
endsnippet

## matplotlib
snippet imnp "import numpy as np" b
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
endsnippet

snippet pplot "plt.plot() and show" b
plt.plot( ${1:x}, ${2:y} )
plt.show()
endsnippet

snippet splot "plt.subplots() and show" b
fig, ax = plt.subplots(1,1)
fig.suptitle( 'long fig title' )

ax.plot($1)
ax.set_title("$2")
ax.set_xlabel("$3")
ax.set_ylabel("$4")

fig.show()
endsnippet

snippet hhist "plt.hist()" b
plt.hist( $1, bin=100 )
endsnippet


## concurrency
snippet snipConcurrent "concurnet thread" b
from concurrent.futures import ThreadPoolExecutor ,as_completed
with ThreadPoolExecutor(max_workers=5) as executor:
		params = [[1,i] for i in range(100)]
		results  = executor.map( lambda args: f(*args), params )
		print( list(results))
endsnippet


snippet snipConcurrentProcess "concurrent process" b
from multiprocessing import Pool
def _foo(i):
	print(i)
	return i
with Pool(10) as p:
		r = list( p.map(_foo, range(30)) )
endsnippet

snippet ppool "multiprocessing for pools"
import multiprocessing as mlp
from multiprocessing import Process, Pool
if __name__ == "__main__":
	with Pool() as pool:
		# create processes 
		results = []
		for url in urls[:5]:
			res = pool.apply_async( getRes, args=(url,))
			results.append( res )
		results = [ res.get() for res in results ]
		# pool.close()
endsnippet

snippet wworker "multiprocessing for workers" b
import multiprocessing as mlp
from multiprocessing import Process, Manager
import time
if __name__ == "__main__":
	workers = []
	m = Manager()
	mlist = m.list()  # Q: need close?

	# create processes 
	for url in urls[:5]:
		worker = Process( target= , args=(,mlist))
		worker.start()
		workers.append( worker )
	for w in workers:
		w.join()
		w.close()
	results = list( mlist )
	mlist.close()
endsnippet

## import pdb
snippet impdb "import pdb" i
import pdb; pdb.set_trace()
endsnippet

snippet bb "import pdb" i
import pdb; pdb.set_trace()
endsnippet

snippet ipdb "import ipdb" i
import ipdb; ipdb.set_trace()
endsnippet

## pandas
snippet impd "import pandas" b
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
endsnippet


snippet imlog "import logging" b
import logging

logging.basicConfig( filename='test.log',
	level= logging.WARNING ,
	format = '%(relativeCreated)4d:%(levelname)8s: %(funcName)s:%(lineno)d\t%(message)s' ,
	filemode = 'w' )
endsnippet

snippet imsys "import system module" b
import sys.getobjsize
import sys
import os
endsnippet

snippet imarg "import sys argv" b
from sys import argv
endsnippet 

snippet ifmain  "if name ==__main__" b
if __name__ == "__main__":
	${1:}
endsnippet

snippet mmkdir "ensure the directory exists " b
import pathlib
${1:dir_name} = "${2:xxxxx}"
pathlib.Path( $1 ).mkdir( parents=True, exist_ok=True)
endsnippet


# https://stackoverflow.com/a/21455138/12506676
snippet ppass "time it" b
import time;
start = time.perf_counter()

print( "pass time: ", time.perf_counter() - start , "sec" )
endsnippet


# sytanx
snippet ttry "try it" b
try:
	raise Exception("error")
except Exception as e:
	print( type(e), e )
raise e
endsnippet

# json
snippet jsload "json file load" b
import json
with open("${1:path}",'r') as file:
	${2:jsfile} = json.load(file)
endsnippet

# open file
snippet wopen "with open file" b
with open( '${1:}' , '${2:}') as f:
	${3:}
endsnippet

# pickle_load, seve
snippet ppload "pickle load" b
with open( '' ,'wb') as f
	pickle.dump( object, f )
with open( '', 'rb' ) as f:
	object = pickle.load(f)
endsnippet

